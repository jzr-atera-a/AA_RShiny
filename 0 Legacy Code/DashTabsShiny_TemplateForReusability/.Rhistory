shiny::runApp()
source('./Tabs/Tab_DashboardSimple.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('./Tabs/Mod_Tab_Map/Tab_Map.R')
runApp()
runApp()
runApp()
runApp()
demog_features <- read_csv('./Tabs/Mod_Tab_Map/data/features_demographics.csv'
)
dat_for_curves <- read_csv('./Tabs/Mod_Tab_Map/data/dat_for_curves2.csv')
dat_for_curves.head()
head(dat_for_curves)
sel_store <- md_stores_set %>% select(location_id)
sel_store <- md_stores %>% select(location_id)
md_stores
sel_store <- md_stores %>% select(name)
sel_store
demog_features
feat_data <- sel_store %>% inner_join(demog_features, by = c("name" = "Locn_No"))
feat_data
feat_data <- sel_store %>% inner_join(demog_features, by = c("name" = "Locn_No"), keep= TRUE)
head(feat_data)
nrow(feat_data)
print(head(feat_data))
runApp()
md_stores
runApp()
demog_features.col
demog_features.columns
demog_features.column
colnames(demog_features)
#UI_Tab_Map<-tabPanel("Map",
Tab_Map  <-tabItem(tabName = "CtMap",
fluidRow(
column(3,  selectInput("selectCNeedsCluster", h3("Select Customer Needs")  ,  clusters_needs, selected = 'All')),
column(3,  selectInput("selectFeature", h3("SelectFeature")  ,  features_list))
),
leafletOutput("clusterMap",height = 1000) )
#UI_Tab_Map<-tabPanel("Map",
Tab_Map  <-tabItem(tabName = "CtMap",
fluidRow(
column(3,  selectInput("selectCNeedsCluster", h3("Select Customer Needs")  ,  clusters_needs, selected = 'All'))
#,column(3,  selectInput("selectFeature", h3("SelectFeature")  ,  features_list))
),
leafletOutput("clusterMap",height = 1000) )
runApp()
demog_f_selected <- demog_features[,"Locn_No"]
demog_f_selected
demog_f_selected <- demog_features[,c("Locn_No",input$selectFeature)]
runApp()
demog_features_sel <- demog_features[,c("Locn_No",input$selectFeature)]
demog_features_sel <- demog_features[,c("Locn_No")]
demog_features_sel
runApp()
runApp()
runApp()
colnames(demog_features)[1]
colnames(demog_features)[2:]
colnames(demog_features)[2:3]
colnames(demog_features)[2:-1]
features_list <- colnames(demog_features)[2:length(demog_features)]
features_list
runApp()
runApp()
runApp()
map_data <-feat_data[,c("map_message","lat","lng","customer_cluster")]
feat_data
demog_features_sel
runApp()
runApp()
runApp()
runApp()
runApp()
getColor <- function(df) {
sapply(df$customer_cluster, function(customer_cluster) {
if(customer_cluster == '1') {
"green"
} else if(customer_cluster == '2') {
"orange"
} else if(customer_cluster == '3') {
"blue"
} else if(customer_cluster == '4') {
"yellow"
} else {
"red"
} })
}
runApp()
runApp()
runApp()
head(md_stores)
md_stores2 <- md_stores2
md_stores2 <- md_stores2
md_stores2 <- md_stores
md_stores2$lng_norm <- scale(md_stores2$lng)
head(md_stores2)
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
md_stores2$lng_norm <- range01(md_stores2$lng)
head(md_stores2)
range01 <- function(x){(max(x)-min(x)}
range01 <- function(x){max(x)-min(x)}
md_stores2$lng_norm <- range01(md_stores2$lng)
head(md_stores2)
min(md_stores2$lng)
max(md_stores2$lng)
min(md_stores2$name)
max(md_stores2$name)
runApp()
runApp()
map_data$feature2 <- range01(map_data$feature)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("plotROC")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
